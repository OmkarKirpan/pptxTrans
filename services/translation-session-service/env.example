# Translation Session Service Environment Configuration
# Copy this file to .env and fill in your actual values

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
# Port for the translation session service
PORT=3002

# Environment (development, staging, production)
NODE_ENV=development

# =============================================================================
# CORS CONFIGURATION
# =============================================================================
# Frontend URL for CORS
FRONTEND_URL=http://localhost:3000

# =============================================================================
# SUPABASE CONFIGURATION (Required)
# =============================================================================
# Supabase project URL
SUPABASE_URL=https://your-project-id.supabase.co

# Supabase anonymous key (for public operations)
SUPABASE_ANON_KEY=your-supabase-anon-key

# =============================================================================
# DEVELOPMENT NOTES
# =============================================================================
# 1. Service Purpose:
#    - Manages translation session lifecycle and metadata
#    - Provides CRUD operations for translation sessions
#    - Integrates with Supabase for data persistence
#
# 2. Database Integration:
#    - Uses translation_sessions table in Supabase
#    - Implements JWT authentication via Supabase
#    - Supports user-specific session management
#
# 3. API Endpoints:
#    - GET /sessions - List user's translation sessions
#    - POST /sessions - Create new translation session
#    - GET /sessions/:id - Get specific session details
#    - PUT /sessions/:id - Update session metadata
#    - DELETE /sessions/:id - Delete translation session
#
# 4. Authentication:
#    - Uses Supabase JWT tokens for user identification
#    - Implements user-scoped data access
#    - Validates tokens on each request
#
# 5. Session Metadata:
#    - Stores session names, languages, and status
#    - Tracks creation and modification timestamps
#    - Maintains user ownership relationships
#
# 6. Integration Points:
#    - Frontend dashboard for session management
#    - Editor for active session handling
#    - PPTX processor for file processing status
#    - Audit service for activity logging 